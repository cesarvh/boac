"""
Copyright Â©2018. The Regents of the University of California (Regents). All Rights Reserved.

Permission to use, copy, modify, and distribute this software and its documentation
for educational, research, and not-for-profit purposes, without fee and without a
signed licensing agreement, is hereby granted, provided that the above copyright
notice, this paragraph and the following two paragraphs appear in all copies,
modifications, and distributions.

Contact The Office of Technology Licensing, UC Berkeley, 2150 Shattuck Avenue,
Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, otl@berkeley.edu,
http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.

IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,
INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF
THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED
"AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
"""


"""
Obfuscate fixtures previously generated by cohort_fixtures.py.

This script will modify fixtures and Postgres values in tandem. Before running, ensure that your demo-local.py has
FIXTURES_PATH and SQLALCHEMY_DATABASE_URI values set to desired demo sources.
"""

import json
import os
from scriptpath import scriptify


os.environ['BOAC_ENV'] = 'demo'

INITIAL_FAKE_UID = 9000000


@scriptify.in_app
def main(app):
    from boac import std_commit
    from boac.models.student import Student

    fake_uid = INITIAL_FAKE_UID
    for student in Student.query.all():
        uid = student.uid

        # Change UID in Postgres.
        student.uid = fake_uid
        std_commit()

        fixtures_path = app.config.get('FIXTURES_PATH')
        profile_file = f'{fixtures_path}/canvas_user_for_uid_{uid}.json'
        courses_file = f'{fixtures_path}/canvas_user_courses_{uid}.json'

        # Obfuscate and rename Canvas profile fixture.
        if os.path.isfile(profile_file):
            with open(profile_file) as f:
                profile_json = json.loads(f.read())

            name = student.first_name + ' ' + student.last_name
            profile_json['name'] = name
            profile_json['short_name'] = student.first_name
            profile_json['sortable_name'] = ', '.join([student.last_name, student.first_name])

            profile_json['login_id'] = str(fake_uid)
            profile_json['sis_login_id'] = str(fake_uid)
            if 'UID' in profile_json['sis_user_id']:
                profile_json['sis_user_id'] = 'UID:{uid}'.format(uid=str(fake_uid))
            else:
                profile_json['sis_user_id'] = str(fake_uid * 2)

            profile_json['avatar_url'] = '/static/app/shared/avatar-female.png'

            new_profile_file = profile_file.replace(uid, str(fake_uid))
            with open(new_profile_file, 'w') as outfile:
                json.dump(profile_json, outfile, indent=2)
            os.remove(profile_file)
            print(f'Replaced {profile_file} with updated values at {new_profile_file}')

        # Rename Canvas course fixture, if present.
        if os.path.isfile(courses_file):
            new_courses_file = courses_file.replace(uid, str(fake_uid))
            os.rename(courses_file, new_courses_file)
            print(f'Moved {courses_file} to {new_courses_file}')

        fake_uid += 1


main()
